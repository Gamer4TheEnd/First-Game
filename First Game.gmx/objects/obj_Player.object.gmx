<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_still</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creation Defaults
grav = 0.3;
vsp = 0;
hsp = 0;
jumpspeed = 8;
movespeed = 5

image_speed = 8/60

//Score Stringe//
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Input KeyBoard
right_key = keyboard_check(ord("D"));
left_key = -keyboard_check(ord("A"));
space_bar = keyboard_check_pressed(vk_space);

//Reactions//
move = left_key + right_key;
hsp = move * movespeed;
if (vsp &lt; 10) vsp += grav;

if (place_meeting(x,y+1,obj_wall))
{
    vsp += space_bar * -jumpspeed
}

//Horizontal Collision//
if (place_meeting(x+hsp,y,obj_wall))
{
    while(!place_meeting(x+sign(hsp),y,obj_wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
}

x += hsp;


//Vertical Collision//
if (place_meeting(x,y+vsp,obj_wall))
{
    while(!place_meeting(x,y+sign(vsp),obj_wall))
    {
        y += sign(vsp);
    }
    vsp = 0;
}

y += vsp;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Animation

//Standing Still
if (hsp = 0)
{
    if (sprite_index !=spr_player_still) image_index = 0;
    sprite_index = spr_player_still;
}


//Moving Right//
if (hsp &gt; 0)
{
    if (sprite_index !=spr_player_right) image_index = 0;
    sprite_index = spr_player_right;
}


//Moving Left//
if (hsp &lt; 0)
{
    if (sprite_index !=spr_player_left) image_index = 0;
    sprite_index = spr_player_left;
}


//Jump Movment Right//
if (vsp &lt; 0) &amp;&amp; (hsp &gt; 0)
{
    sprite_index = spr_player_jump;
    if (sprite_index != spr_player_jump) image_index = 0;
    if (sprite_index = spr_player_jump) image_index = 0;
}


//Jump Movement Left//
if (vsp &lt; 0) &amp;&amp; (hsp &lt; 0)
{
    sprite_index = spr_player_jump;
    if (sprite_index != spr_player_jump) image_index = 1;
    if (sprite_index = spr_player_jump) image_index = 1;
}


//Jump Movement Down//
if (vsp &lt; 0) &amp;&amp; (hsp = 0)
{
    sprite_index = spr_player_jump;
    if (sprite_index != spr_player_jump) image_index = 2;
    if (sprite_index = spr_player_jump) image_index = 2;
}

//Fall Movment Right//
if (vsp &gt; 0) &amp;&amp; (hsp &gt; 0)
{
    sprite_index = spr_player_jump;
    if (sprite_index != spr_player_jump) image_index = 0;
    if (sprite_index = spr_player_jump) image_index = 0;
}


//Fall Movement Left//
if (vsp &gt; 0) &amp;&amp; (hsp &lt; 0)
{
    sprite_index = spr_player_jump;
    if (sprite_index != spr_player_jump) image_index = 1;
    if (sprite_index = spr_player_jump) image_index = 1;
}


//Fall Movement Down//
if (vsp &gt; 0) &amp;&amp; (hsp = 0)
{
    sprite_index = spr_player_jump;
    if (sprite_index != spr_player_jump) image_index = 2;
    if (sprite_index = spr_player_jump) image_index = 2;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Gun Power Up
if (place_meeting(x,y,obj_powerup_gun_crystal))
{
    instance_create(x,y,obj_player_powerup_gun);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Super Speed Power Up
if (place_meeting(x,y,obj_powerup_superspeed_crystal))
{
    instance_create(x,y,obj_player_powerup_superspeed);
    instance_destroy();    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lives &amp; Game Over
if (lives &gt; 0)
{
    lives -= 1
    instance_create(32,416,obj_player)
    instance_destroy();
}
if (lives = 0)
{
    room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset Game
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
